apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'cormorant'
    bintrayOrga = 'mobilesec'

    publishedGroupId = 'at.usmile.cormorant'
    libraryName = 'cormorant-api'
    artifact = 'cormorant-api'

    libraryDescription = 'API for creating plugins for the Cormorant Authentication Framework'

    siteUrl = 'https://github.com/mobilesec/cormorant'
    gitUrl = 'https://github.com/mobilesec/cormorant'

    libraryVersion = '0.0.1'

    developerId = 'hintzed'
    developerName = 'Daniel Hintze'
    developerEmail = 'daniel@hintze-it.de'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
}


apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    def localProperties = new File('local.properties')
    def password = 'bogus'

    // For deployment, you need to have a local.properties file with your bintray user and key. For
    // building, we don't need this file.
    if(localProperties.exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        password = properties.getProperty("bintray.gpg.password")
    } else {
        user = 'bogus'
        key = 'bogus'
    }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrga
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = password
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}